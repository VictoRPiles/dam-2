@startuml
abstract class server.ServerController {
+ {static} void main(String[])
}
class server.Server {
- ServerSocket socket
- int port
- DataInputStream input
- DataOutputStream output
+ <<Create>> Server(int)
+ void init()
+ void close()
+ ServerSocket getSocket()
+ void setSocket(ServerSocket)
+ int getPort()
+ DataInputStream getInput()
+ void setInput(DataInputStream)
+ DataOutputStream getOutput()
+ void setOutput(DataOutputStream)
+ String toString()
+ boolean equals(Object)
+ int hashCode()
}
abstract class client.ClientController {
+ {static} void main(String[])
}
class client.Client {
- Socket socket
- String host
- int port
- DataInputStream input
- DataOutputStream output
+ <<Create>> Client(String,int)
+ void init()
+ void close()
+ Socket getSocket()
+ void setSocket(Socket)
+ String getHost()
+ int getPort()
+ DataInputStream getInput()
+ void setInput(DataInputStream)
+ DataOutputStream getOutput()
+ void setOutput(DataOutputStream)
+ String toString()
+ boolean equals(Object)
+ int hashCode()
}

server.ServerController - server.Server
client.ClientController - client.Client
@enduml